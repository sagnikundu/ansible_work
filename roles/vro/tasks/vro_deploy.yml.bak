#
#  Copyright 2015 VMware, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
---
- name: Check if vro exists
  does_vm_exist:
    vcenter_host: "{{vcenter_host}}"
    vcenter_user: "{{vcenter_user}}"
    vcenter_password: "{{vcenter_password}}"
    vcenter_port: "{{ vcenter_port }}"
    vm_name: "{{ item.name }}"
  with_items:
    - { name: "{{vro_host_name}}", ip: "{{ vro_ip }}" }
  register: vro_node_exists
  tags:
    - vro_deploy

- debug: msg= "{{ vro_node_exists }}"
  tags:
    - vro_deploy

- name: Deploy vRealize Orchestrator OVA
  shell: >
    {{ vro_ovftool }}
    '--name={{ item.item.name }}'
    --acceptAllEulas
    --skipManifestCheck
    --allowExtraConfig
    --X:enableHiddenProperties
    --noSSLVerify
    '--datastore={{vro_datastore}}'
    '--diskMode=thin'
    '--ipProtocol=IPv4'
    '--net:Network 1=={{vro_network}}'
    '--prop:vami.gateway.vCO_Appliance={{vro_gateway}}'
    '--prop:vami.DNS.vCO_Appliance={{vro_dns}}'
    '--prop:vami.ip0.vCO_Appliance={{item.item.ip}}'
    '--prop:vami.netmask0.vCO_Appliance={{vro_netmask}}'
    '--prop:guestinfo.cis.appliance.ssh.enabled=true'
    '--powerOn=1'
    '{{ vro_ova_location }}/{{ vro_ova }}'
    'vi://{{ mgmt_vc_username | urlencode }}:{{ mgmt_vc_password | urlencode }}@{{ mgmt_vc }}/{{ mgmt_vc_datacenter }}/host/{{ mgmt_vc_cluster | urlencode}}/'
  when: item.msg == 'Appliance does not exist.'
  with_items: "{{ vro_node_exists.results }}"
  tags:
    - vro_deploy

- name: Check if vRO Instance is created in vcenter
  ignore_errors: yes
  local_action:
    module: vcenter_query
    host: "{{ mgmt_vc }}"
    login: "{{ mgmt_vc_username }}"
    password: "{{ mgmt_vc_password }}"
    port: "{{ mgmt_vc_port }}"
    resourcename: "{{ vro_name }}"
    resourcevarname: "{{vro_name }}"
    resourcetype: 'vm'
  register: vro_created
  when: not vro_exists.changed is defined or vro_deleted.changed

- name: debug checking vRO Instance is created
  debug: var=vro_created
